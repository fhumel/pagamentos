<?php

namespace Tests\Unit\ModelTrait\Users;

use App\Contracts\Users\Services\UserServiceInterface;
use App\Entities\Users\UserEntity;
use App\Mappers\Users\UserMapper;
use Codeception\PHPUnit\TestCase;

class UserServiceTest extends TestCase
{

    private $transactionEntity;

    public function setUp (): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->configureDependencies();
    }

     public function testTransfer()
    {
        $balanceEntity = $this->makeBalanceEntity();

        $transactionEntity = clone $this->transactionEntity;

        $balanceService->method('withDraw')->willReturn($balanceEntity);
        $balanceService->method('deposit')->willReturn(
            [
                'id' => '2f5f8fa1-f14f-4997-aa5c-8ddf6e5c9908',
                'payer' => '6b1faf2e-fbb1-4af1-ab70-9471c2a0f046',
                'payee' => '04efa1b0-c76d-436d-a459-363af805bb49',
                'value' => 200.98
            ]
        );
        $authorizerService->method('authorize')->willReturn(true);
        $notifierService->method('notify')->willReturn(true);
        $depositMapper->method('map')->willReturn($depositEntity);

        $transferService = new TransferService($balanceService, $authorizerService, $notifierService, $depositMapper);
        $return = $transferService->transfer($transactionEntity);
        $this->assertNull($return);
    }
}
